/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { jest } from '@jest/globals';\nimport { SplitInterface } from '../../components/SplitInterface';\nimport { usePDFStore } from '../../store/pdfStore';\nimport * as operationUtils from '../../utils/operationUtils';\n\n// Mock the PDF store\njest.mock('../../store/pdfStore');\nconst mockUsePDFStore = usePDFStore as jest.MockedFunction<typeof usePDFStore>;\n\n// Mock operation utilities\njest.mock('../../utils/operationUtils');\nconst mockParsePageRanges = operationUtils.parsePageRanges as jest.MockedFunction<typeof operationUtils.parsePageRanges>;\nconst mockValidatePageRanges = operationUtils.validatePageRanges as jest.MockedFunction<typeof operationUtils.validatePageRanges>;\nconst mockFormatPageRanges = operationUtils.formatPageRanges as jest.MockedFunction<typeof operationUtils.formatPageRanges>;\n\n// Mock child components\njest.mock('../../components/PageRangeSelector', () => {\n  return {\n    PageRangeSelector: ({ onRangeChange, totalPages }: any) => (\n      <div data-testid=\"page-range-selector\">\n        <button \n          onClick={() => onRangeChange([{ start: 1, end: 5 }])}\n          data-testid=\"select-pages-1-5\"\n        >\n          Select Pages 1-5\n        </button>\n        <span data-testid=\"total-pages\">{totalPages}</span>\n      </div>\n    )\n  };\n});\n\njest.mock('../../components/OperationProgressBar', () => {\n  return {\n    OperationProgressBar: ({ operationType, jobId }: any) => (\n      <div data-testid=\"operation-progress-bar\">\n        <span data-testid=\"operation-type\">{operationType}</span>\n        <span data-testid=\"job-id\">{jobId}</span>\n      </div>\n    )\n  };\n});\n\njest.mock('../../components/ResultPreview', () => {\n  return {\n    ResultPreview: ({ operationType, results }: any) => (\n      <div data-testid=\"result-preview\">\n        <span data-testid=\"operation-type\">{operationType}</span>\n        <span data-testid=\"results\">{JSON.stringify(results)}</span>\n      </div>\n    )\n  };\n});\n\ndescribe('SplitInterface', () => {\n  const mockFile = new File(['pdf content'], 'test.pdf', { type: 'application/pdf' });\n  \n  const defaultStoreState = {\n    currentFile: mockFile,\n    totalPages: 20,\n    splitting: {\n      method: 'page_ranges',\n      pageRanges: [],\n      options: {\n        preserve_metadata: true,\n        preserve_bookmarks: true,\n        custom_naming: false,\n        naming_pattern: 'page_{start}-{end}'\n      },\n      jobId: undefined,\n      results: undefined\n    },\n    setSplitMethod: jest.fn(),\n    setSplitPageRanges: jest.fn(),\n    setSplitOptions: jest.fn(),\n    initiateSplit: jest.fn()\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUsePDFStore.mockReturnValue(defaultStoreState);\n    \n    // Setup default mock implementations\n    mockParsePageRanges.mockImplementation((input: string) => {\n      if (input === '1-5') return [{ start: 1, end: 5 }];\n      if (input === '1,3,5') return [{ start: 1, end: 1 }, { start: 3, end: 3 }, { start: 5, end: 5 }];\n      return [];\n    });\n    \n    mockValidatePageRanges.mockReturnValue({\n      isValid: true,\n      errors: [],\n      warnings: []\n    });\n    \n    mockFormatPageRanges.mockImplementation((ranges) => \n      ranges.map(r => r.start === r.end ? `${r.start}` : `${r.start}-${r.end}`).join(', ')\n    );\n  });\n\n  describe('Rendering', () => {\n    it('renders split interface when file is present', () => {\n      render(<SplitInterface />);\n      \n      expect(screen.getByText('Split Method')).toBeInTheDocument();\n      expect(screen.getByText('Page Ranges')).toBeInTheDocument();\n      expect(screen.getByText('Page Count')).toBeInTheDocument();\n      expect(screen.getByText('Bookmarks')).toBeInTheDocument();\n      expect(screen.getByText('Pattern')).toBeInTheDocument();\n    });\n\n    it('shows no file message when no file is present', () => {\n      mockUsePDFStore.mockReturnValue({\n        ...defaultStoreState,\n        currentFile: null\n      });\n      \n      render(<SplitInterface />);\n      expect(screen.getByText('Please upload a PDF file to begin splitting.')).toBeInTheDocument();\n    });\n\n    it('displays page range selector by default', () => {\n      render(<SplitInterface />);\n      expect(screen.getByTestId('page-range-selector')).toBeInTheDocument();\n      expect(screen.getByTestId('total-pages')).toHaveTextContent('20');\n    });\n  });\n\n  describe('Split Method Selection', () => {\n    it('allows selecting different split methods', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      // Test page count method\n      const pageCountButton = screen.getByText('Page Count');\n      await user.click(pageCountButton);\n      \n      expect(defaultStoreState.setSplitMethod).toHaveBeenCalledWith('page_count');\n      expect(screen.getByLabelText('Pages per Split')).toBeInTheDocument();\n    });\n\n    it('shows different UI for each split method', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      // Test bookmark method\n      const bookmarkButton = screen.getByText('Bookmarks');\n      await user.click(bookmarkButton);\n      \n      expect(screen.getByText('Split will be performed based on the document\\'s bookmark structure.')).toBeInTheDocument();\n    });\n\n    it('shows pattern input for pattern method', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const patternButton = screen.getByText('Pattern');\n      await user.click(patternButton);\n      \n      expect(screen.getByPlaceholderText('Enter text pattern to split on...')).toBeInTheDocument();\n    });\n  });\n\n  describe('Page Range Input', () => {\n    it('parses and validates page ranges', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, '1-5');\n\n      expect(mockParsePageRanges).toHaveBeenCalledWith('1-5');\n      expect(mockValidatePageRanges).toHaveBeenCalledWith([{ start: 1, end: 5 }], 20);\n    });\n\n    it('shows validation errors for invalid ranges', async () => {\n      mockValidatePageRanges.mockReturnValue({\n        isValid: false,\n        errors: ['Invalid page range'],\n        warnings: []\n      });\n\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, 'invalid');\n\n      await waitFor(() => {\n        expect(screen.getByText('Validation Errors:')).toBeInTheDocument();\n        expect(screen.getByText('â€¢ Invalid page range')).toBeInTheDocument();\n      });\n    });\n\n    it('updates store when valid ranges are entered', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, '1-5');\n\n      expect(defaultStoreState.setSplitPageRanges).toHaveBeenCalledWith([{ start: 1, end: 5 }]);\n    });\n  });\n\n  describe('Split Options', () => {\n    it('toggles preserve metadata option', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const checkbox = screen.getByLabelText('Preserve document metadata');\n      expect(checkbox).toBeChecked();\n\n      await user.click(checkbox);\n      expect(defaultStoreState.setSplitOptions).toHaveBeenCalledWith({\n        preserve_metadata: false\n      });\n    });\n\n    it('toggles preserve bookmarks option', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const checkbox = screen.getByLabelText('Preserve bookmarks');\n      expect(checkbox).toBeChecked();\n\n      await user.click(checkbox);\n      expect(defaultStoreState.setSplitOptions).toHaveBeenCalledWith({\n        preserve_bookmarks: false\n      });\n    });\n\n    it('enables custom naming when checkbox is checked', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const checkbox = screen.getByLabelText('Use custom file naming');\n      await user.click(checkbox);\n\n      expect(defaultStoreState.setSplitOptions).toHaveBeenCalledWith({\n        custom_naming: true\n      });\n\n      // Should show naming pattern input\n      expect(screen.getByPlaceholderText('e.g., page_{start}-{end}')).toBeInTheDocument();\n    });\n  });\n\n  describe('Split Preview', () => {\n    it('generates preview for valid page ranges', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, '1-5');\n\n      await waitFor(() => {\n        expect(screen.getByText('Split Preview')).toBeInTheDocument();\n        expect(screen.getByText('1')).toBeInTheDocument(); // Estimated files\n        expect(screen.getByText('20')).toBeInTheDocument(); // Total pages\n      });\n    });\n\n    it('shows preview for page count method', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      // Switch to page count method\n      const pageCountButton = screen.getByText('Page Count');\n      await user.click(pageCountButton);\n\n      const input = screen.getByLabelText('Pages per Split');\n      await user.clear(input);\n      await user.type(input, '5');\n\n      await waitFor(() => {\n        expect(screen.getByText('Split Preview')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Split Initiation', () => {\n    it('initiates split with page ranges method', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      // Set up valid page ranges\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, '1-5');\n\n      // Click start split\n      const startButton = screen.getByText('Start Split');\n      await user.click(startButton);\n\n      expect(defaultStoreState.initiateSplit).toHaveBeenCalledWith(\n        mockFile,\n        {\n          method: 'page_ranges',\n          page_ranges: [{ start: 1, end: 5 }],\n          options: {\n            preserve_metadata: true,\n            preserve_bookmarks: true,\n            custom_naming: false,\n            naming_pattern: 'page_{start}-{end}'\n          }\n        }\n      );\n    });\n\n    it('initiates split with page count method', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      // Switch to page count method\n      const pageCountButton = screen.getByText('Page Count');\n      await user.click(pageCountButton);\n\n      const input = screen.getByLabelText('Pages per Split');\n      await user.clear(input);\n      await user.type(input, '5');\n\n      const startButton = screen.getByText('Start Split');\n      await user.click(startButton);\n\n      expect(defaultStoreState.initiateSplit).toHaveBeenCalledWith(\n        mockFile,\n        {\n          method: 'page_count',\n          pages_per_split: 5,\n          options: expect.any(Object)\n        }\n      );\n    });\n\n    it('prevents split when validation errors exist', async () => {\n      mockValidatePageRanges.mockReturnValue({\n        isValid: false,\n        errors: ['Invalid range'],\n        warnings: []\n      });\n\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, 'invalid');\n\n      const startButton = screen.getByText('Start Split');\n      expect(startButton).toBeDisabled();\n    });\n  });\n\n  describe('Progress and Results', () => {\n    it('shows progress bar when job is running', () => {\n      mockUsePDFStore.mockReturnValue({\n        ...defaultStoreState,\n        splitting: {\n          ...defaultStoreState.splitting,\n          jobId: 'job-123'\n        }\n      });\n\n      render(<SplitInterface />);\n      \n      const progressBar = screen.getByTestId('operation-progress-bar');\n      expect(progressBar).toBeInTheDocument();\n      expect(screen.getByTestId('operation-type')).toHaveTextContent('splitting');\n      expect(screen.getByTestId('job-id')).toHaveTextContent('job-123');\n    });\n\n    it('shows results when split is completed', () => {\n      const mockResults = {\n        files: [{ filename: 'split1.pdf', page_range: { start: 1, end: 5 } }]\n      };\n\n      mockUsePDFStore.mockReturnValue({\n        ...defaultStoreState,\n        splitting: {\n          ...defaultStoreState.splitting,\n          results: mockResults\n        }\n      });\n\n      render(<SplitInterface />);\n      \n      const resultPreview = screen.getByTestId('result-preview');\n      expect(resultPreview).toBeInTheDocument();\n      expect(screen.getByTestId('operation-type')).toHaveTextContent('split');\n    });\n\n    it('calls completion callback when results are available', () => {\n      const mockOnComplete = jest.fn();\n      const mockResults = { files: [] };\n\n      mockUsePDFStore.mockReturnValue({\n        ...defaultStoreState,\n        splitting: {\n          ...defaultStoreState.splitting,\n          results: mockResults\n        }\n      });\n\n      render(<SplitInterface onSplitComplete={mockOnComplete} />);\n      \n      expect(mockOnComplete).toHaveBeenCalledWith(mockResults);\n    });\n  });\n\n  describe('Page Range Selector Integration', () => {\n    it('updates input when page range selector changes', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const selectButton = screen.getByTestId('select-pages-1-5');\n      await user.click(selectButton);\n\n      expect(defaultStoreState.setSplitPageRanges).toHaveBeenCalledWith([{ start: 1, end: 5 }]);\n      \n      // Input should be updated with formatted ranges\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      expect(input).toHaveValue('1-5');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles parse errors gracefully', async () => {\n      mockParsePageRanges.mockImplementation(() => {\n        throw new Error('Parse error');\n      });\n\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, 'invalid');\n\n      await waitFor(() => {\n        expect(screen.getByText('Invalid page range format. Use format like: 1-5, 8, 10-12')).toBeInTheDocument();\n      });\n    });\n\n    it('handles split initiation errors', async () => {\n      defaultStoreState.initiateSplit.mockRejectedValue(new Error('Split failed'));\n      \n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      const input = screen.getByPlaceholderText('Enter page ranges...');\n      await user.type(input, '1-5');\n\n      const startButton = screen.getByText('Start Split');\n      await user.click(startButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('Failed to start split operation. Please try again.')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA labels and roles', () => {\n      render(<SplitInterface />);\n      \n      const form = screen.getByRole('form', { name: /split/i }) || screen.getByTestId('split-interface');\n      expect(form || screen.getByText('Split Method')).toBeInTheDocument();\n      \n      // Check that form elements have labels\n      expect(screen.getByLabelText(/preserve document metadata/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/preserve bookmarks/i)).toBeInTheDocument();\n    });\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup();\n      render(<SplitInterface />);\n\n      // Tab through elements\n      await user.tab();\n      expect(screen.getByText('Page Ranges')).toHaveFocus();\n    });\n  });\n});"